<!DOCTYPE html>
<html lang="zh-TW">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>訂單詳情</title>
	<style>
		.order-details {
			padding: 20px;
			background-color: #fff;
			border-radius: 8px;
			box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
			max-width: 600px;
			margin: auto;
		}

		.form-group {
			margin-bottom: 15px;
		}

		.actions {
			margin-top: 20px;
		}

		.radio-group {
			margin-bottom: 15px;
		}

		.radio-group label {
				display: block;
		}

		.radio-option {
			display: flex;
			align-items: center;
			margin-bottom: 5px;
		}

		.radio-option input[type="radio"] {
				margin-right: 5px;
		}
	</style>
</head>
<body>
	<div id="order-app">
		<div class="order-details">
			<h2>訂單詳情</h2>



			<div class="form-group">
				<strong for="productName">商品名稱</strong>
				<input type="text" id="productName" v-model="orderDetails.productName" class="form-control" readonly>
			</div>

			<div class="form-group">
				<strong for="userAccount">會員帳號</strong>
				<input type="text" id="userAccount"  class="form-control" readonly :value="u_name">
			</div>




			<div class="form-group radio-group">
				<strong>訂單規格</strong>
				<div v-if="orderDetails.productFormats && Object.keys(orderDetails.productFormats).length > 0">
					<div v-for="(formats, formatType) in groupedFormats" :key="formatType">
						<strong>◆ {{ formatType }}</strong>
						<div v-for="format in formats" :key="format.id" class="radio-option">
							<input type="radio" :id="format.id" :value="format.id" v-model="selectedFormat[formatType]" @@change="updateOrderFormats(formatType, format.id)">
							<label :for="format.id">{{ format.formatName }}</label>
						</div>
					</div>
				</div>
				<div v-else>
					<input type="hidden">
					單一規格
				</div>
			</div>


			<div class="form-group">
				<strong for="quantity">訂購數量</strong>
				<input type="number" id="quantity" v-model="orderDetails.quantity" class="form-control" @@input="totalPrice" >
			</div>

			<div class="form-group">
				<strong for="price">商品單價</strong>
				<input type="text" id="price" v-model="orderDetails.price" class="form-control" readonly >
			</div>

			<div class="form-group">
				<strong for="orderPrice">總價錢</strong>
				<input type="text" id="orderPrice" v-model="orderDetails.orderPrice" class="form-control" readonly>
			</div>

			<div class="form-group">
				<strong for="address">地址</strong>
				<textarea id="address" v-model="submitOrderModel.address" class="form-control"></textarea>

			</div>
			<div class="form-group">
				<strong for="note">備註</strong>
				<textarea id="note" v-model="submitOrderModel.note" class="form-control"></textarea>

			</div>
			<div class="form-group">
				<strong for="joinModifiedTime">下單時間</strong>
				<input type="text" id="joinModifiedTime"  class="form-control" :value="orderDetails.modifiedTimeView" readonly>
			</div>

			<div class="actions d-flex justify-content-end">
				<button @@click="submitOrder" class="btn btn-success mx-2">提交訂單</button>
				<button @@click="goBack" class="btn btn-outline-secondary">返回</button>
			</div>
		</div>
	</div>

	<script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const orderApp = Vue.createApp({
				data() {
					return {
						u_name: "",
						groupBuyingId: new URLSearchParams(window.location.search).get('id'),
						orderDetails: {
							id: '',
							productName: '',
							userAccount: '',
							quantity: 0,
							price: 0,
							orderPrice: 0,
							modifiedTimeView: '',
							productFormats: []
						},
						submitOrderModel: {

							id: 0,
							groupBuyingId: 0,
							userAccount: '',
							address: '',
							note: '',
							joinModifiedTime: '',
							joinStatement: '',
							orderFormats: [] // 初始為空數組，動態填充
							

						},
						selectedFormat: {}
					};
				},
				mounted() {
					this.fetchOrderDetails();
				},
				computed: {
					groupedFormats() {
						return this.orderDetails.productFormats.reduce((acc, format) => {
							if (!acc[format.formatType]) {
								acc[format.formatType] = [];
							}
							acc[format.formatType].push(format);
							return acc;
						}, {});
					}
				},

				methods: {
					async fetchOrderDetails() {
						try {
							const response = await axios.get(`https://localhost:7292/api/GroupBuying/Order/${this.groupBuyingId}`);
							this.u_name = username; // 確保 username 變數存在
							this.submitOrderModel.joinStatement = "已參加";
							this.submitOrderModel.groupBuyingId = this.groupBuyingId;
							this.submitOrderModel.userAccount = username;
							this.orderDetails = response.data;

							this.submitOrderModel.joinModifiedTime = this.orderDetails.modifiedTimeView;
							//console.log('Fetched order details:', this.orderDetails); 

							// 初始化 selectedFormat
							if (this.orderDetails.productFormats) {
								Object.keys(this.orderDetails.productFormats).forEach(formatType => {
									this.selectedFormat[formatType] = '';
								});
							}
						} catch (error) {
							console.error('Error fetching order details:', error);
						}
					},
					totalPrice() {
						console.log('偷偷Quantity:', this.orderDetails.quantity, '類別:');
						this.orderDetails.orderPrice = this.orderDetails.quantity * this.orderDetails.price;
						this.submitOrderModel.orderFormats.forEach(f => {
							f.quantity = this.orderDetails.quantity;
						});

					},
					updateOrderFormats(formatType, selectedFormatId) {
						console.log('阿得Quantity:', this.orderDetails.quantity, '類別:', formatType,'規格ID:', selectedFormatId);
				let format = this.submitOrderModel.orderFormats.find(f => f.formatType === formatType);

				if (format) {
					// 更新現有的項目
					format.formatId = selectedFormatId;
				} else {
					// 添加新項目
					this.submitOrderModel.orderFormats.push({
						orderFormatId: 0, // 或者設定適當的初始值
						groupBuyingDetailId: 0, // 或者設定適當的初始值
						formatType: formatType, // 添加 formatType
						formatId: selectedFormatId,
								quantity: this.orderDetails.quantity, // 或者設定適當的初始值
					});
				}
			},
					async submitOrder() {
						try {
							
							console.log('Submitting order:', this.submitOrderModel); // 檢查數據結構
							const response = await axios.post('https://localhost:7292/api/GroupBuying/SubmitOrder', this.submitOrderModel);
							const groupBuyingDetailId = response.data.groupBuyingDetailId; // 獲取訂單 ID

							// 更新 `orderFormats` 中的 `groupBuyingDetailId`
							this.submitOrderModel.orderFormats.forEach(format => {
								format.groupBuyingDetailId = groupBuyingDetailId;
							});

							Swal.fire({
								title: '成功',
								text: '訂單提交成功！',
								icon: 'success',
								confirmButtonText: '確定'
							}).then(() => {
								window.location.href = 'https://localhost:7231/GroupBuying';
							});
						} catch (error) {
							console.error('Error submitting order:', error.response ? error.response.data : error.message);
							Swal.fire({
								title: '錯誤',
								text: '訂單提交失敗，請稍後再試。',
								icon: 'error',
								confirmButtonText: '確定'
							});
						}
					},
					goBack() {
						window.history.back();
					}
				}
			});

			orderApp.mount('#order-app');
		});
	</script>
</body>
</html>
